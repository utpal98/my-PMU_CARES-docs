{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PMU CARES Documentation","text":"<p>This site provides reference and examples for the PMU CARES Python module. Navigate to the Reference section to explore all classes, methods, and usage examples.</p>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#PMU_CARES.CARESpixel","title":"<code>CARESpixel</code>","text":"Source code in <code>PMU_CARES.py</code> <pre><code>class CARESpixel:\n    def __init__(self, pin, total_leds):\n        \"\"\"\n        Initialize the NeoPixel display.\n\n        :param pin: A `machine.Pin` object or pin number (int).\n        :param total_leds: Total number of LEDs in the matrix (max 64).\n\n        Example:\n            cp = CARESpixel(pin=5, total_leds=64)\n        \"\"\"\n        if isinstance(pin, machine.Pin):\n            self.pin = pin\n        elif isinstance(pin, int):\n            self.pin = machine.Pin(pin, machine.Pin.OUT)\n        else:\n            raise ValueError(\"Invalid pin. Must be machine.Pin or int.\")\n\n        if total_leds &gt; 64:\n            raise ValueError(\"total_leds cannot exceed 64.\")\n\n        self.total_leds = total_leds\n        self.display = neopixel.NeoPixel(self.pin, self.total_leds)\n        self.dim_purple = (29, 0, 42)\n        self.dim_green = (0, 50, 0)\n        self.bright_red = (50, 0, 0)\n        self.cloud_color = (20, 20, 20)\n        self.rain_color = (0, 0, 50)\n        self.lightning_color = (255, 255, 0)\n        self.slow_rain_delay = 0.15\n        self.fast_rain_delay = 0.05\n\n        self.snake = []\n        self.food = []\n        self.current_direction = (1, 0)\n\n        self.letters = {\n            'A': [0b01110, 0b10001, 0b10001, 0b11111, 0b10001, 0b10001, 0b10001],\n            'B': [0b11110, 0b10001, 0b10001, 0b11110, 0b10001, 0b10001, 0b11110],\n            'C': [0b01111, 0b10000, 0b10000, 0b10000, 0b10000, 0b10000, 0b01111],\n            # ... (other letters omitted for brevity)\n            ' ': [0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000]\n        }\n\n    def clear_display(self):\n        \"\"\"\n        Clear all LEDs.\n\n        Example:\n            cp.clear_display()\n        \"\"\"\n        for i in range(self.total_leds):\n            self.display[i] = (0, 0, 0)\n        self.display.write()\n\n    def display_letter_with_offset(self, letter, offset):\n        \"\"\"\n        Display a letter with horizontal offset (for scrolling).\n\n        Example:\n            cp.display_letter_with_offset('A', 2)\n        \"\"\"\n        pattern = self.letters.get(letter.upper(), [])\n        for row, row_data in enumerate(pattern):\n            for col in range(5):\n                matrix_col = col + offset\n                if 0 &lt;= matrix_col &lt; 8:\n                    if row_data &amp; (1 &lt;&lt; (4 - col)):\n                        self.display[row * 8 + matrix_col] = self.dim_purple\n                    else:\n                        self.display[row * 8 + matrix_col] = (0, 0, 0)\n\n    def scroll_text(self, text):\n        \"\"\"\n        Scroll text across the LED matrix.\n\n        Example:\n            cp.scroll_text(\"HELLO\")\n        \"\"\"\n        text = ' ' + text + '  '\n        for position in range(len(text) * 6):\n            self.clear_display()\n            for i, letter in enumerate(text):\n                self.display_letter_with_offset(letter, 8 - (position - i * 6))\n            self.display.write()\n            time.sleep(0.1)\n\n    # Snake game methods\n    def reset_game(self):\n        \"\"\"\n        Reset snake game state.\n\n        Example:\n            cp.reset_game()\n        \"\"\"\n        self.snake = [(4, 4)]\n        self.food = self.spawn_food()\n        self.current_direction = (1, 0)\n\n    def coord_to_index(self, x, y):\n        \"\"\"\n        Convert x,y coordinates to LED index.\n\n        Example:\n            idx = cp.coord_to_index(2, 3)\n        \"\"\"\n        return y * 8 + x\n\n    def update_snake_display(self):\n        \"\"\"\n        Update LEDs to show snake and food positions.\n\n        Example:\n            cp.update_snake_display()\n        \"\"\"\n        self.clear_display()\n        for segment in self.snake:\n            self.display[self.coord_to_index(segment[0], segment[1])] = self.dim_green\n        self.display[self.coord_to_index(self.food[0], self.food[1])] = self.bright_red\n        self.display.write()\n\n    def is_valid_position(self, position):\n        \"\"\"\n        Check if a position is valid for the snake.\n\n        Example:\n            valid = cp.is_valid_position((1, 1))\n        \"\"\"\n        x, y = position\n        return 0 &lt;= x &lt; 8 and 0 &lt;= y &lt; 8 and position not in self.snake\n\n    def spawn_food(self):\n        \"\"\"\n        Generate a new food position.\n\n        Example:\n            food = cp.spawn_food()\n        \"\"\"\n        while True:\n            new_food = (random.randint(0, 7), random.randint(0, 7))\n            if new_food not in self.snake:\n                return new_food\n\n    def get_direction_towards_food(self):\n        \"\"\"\n        Determine snake direction towards food.\n\n        Example:\n            direction = cp.get_direction_towards_food()\n        \"\"\"\n        head_x, head_y = self.snake[0]\n        food_x, food_y = self.food\n\n        possible_directions = []\n        if head_x &lt; food_x:\n            possible_directions.append((1, 0))\n        elif head_x &gt; food_x:\n            possible_directions.append((-1, 0))\n        if head_y &lt; food_y:\n            possible_directions.append((0, 1))\n        elif head_y &gt; food_y:\n            possible_directions.append((0, -1))\n\n        for direction in possible_directions:\n            next_pos = (head_x + direction[0], head_y + direction[1])\n            if self.is_valid_position(next_pos):\n                return direction\n\n        for direction in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            next_pos = (head_x + direction[0], head_y + direction[1])\n            if self.is_valid_position(next_pos):\n                return direction\n\n        return self.current_direction\n\n    def collision_effect(self, collision_position):\n        \"\"\"\n        Show collision effect on LED.\n\n        Example:\n            cp.collision_effect((3, 3))\n        \"\"\"\n        x, y = collision_position\n        colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]\n        for color in colors:\n            self.display[self.coord_to_index(x, y)] = color\n            self.display.write()\n            time.sleep(0.1)\n            self.display[self.coord_to_index(x, y)] = (0, 0, 0)\n            self.display.write()\n            time.sleep(0.1)\n\n    def twinkle_star(self, position, max_brightness=50, steps=10, delay=0.05):\n        \"\"\"\n        Twinkle a star effect at a position.\n\n        Example:\n            cp.twinkle_star(10)\n        \"\"\"\n        for brightness in range(1, max_brightness + 1, max_brightness // steps):\n            self.display[position] = (brightness, brightness, brightness)\n            self.display.write()\n            time.sleep(delay)\n\n        for brightness in range(max_brightness, 0, -max_brightness // steps):\n            self.display[position] = (brightness, brightness, brightness)\n            self.display.write()\n            time.sleep(delay)\n\n    def draw_clouds(self):\n        \"\"\"\n        Draw clouds pattern.\n\n        Example:\n            cp.draw_clouds()\n        \"\"\"\n        for i in range(8):\n            self.display[i] = self.cloud_color\n        for i in range(8, 16):\n            self.display[i] = self.cloud_color\n        self.display.write()\n\n    def animate_rain(self, duration, delay, stop_new_drops=False):\n        \"\"\"\n        Animate rain drops.\n\n        :param duration: seconds to animate\n        :param delay: delay between frames\n        :param stop_new_drops: stop adding new drops if True\n\n        Example:\n            cp.animate_rain(5, 0.1)\n        \"\"\"\n        rain_positions = []\n        start_time = time.time()\n        while time.time() - start_time &lt; duration or rain_positions:\n            if not stop_new_drops and time.time() - start_time &lt; duration:\n                start_position = random.choice(range(8, 16))\n                rain_positions.append(start_position)\n            for i in range(len(rain_positions)):\n                if rain_positions[i] &lt; 56:\n                    self.display[rain_positions[i]] = (0, 0, 0)\n                    rain_positions[i] += 8\n                    self.display[rain_positions[i]] = self.rain_color\n                else:\n                    self.display[rain_positions[i]] = (0, 0, 0)\n                    rain_positions[i] = None\n            rain_positions = [pos for pos in rain_positions if pos is not None]\n            self.display.write()\n            time.sleep(delay)\n\n    def lightning_effect(self):\n        \"\"\"\n        Animate lightning flashes.\n\n        Example:\n            cp.lightning_effect()\n        \"\"\"\n        for _ in range(3):\n            for i in range(self.total_leds):\n                self.display[i] = self.lightning_color\n            self.display.write()\n            time.sleep(0.05)\n            self.clear_display()\n            self.draw_clouds()\n            self.display.write()\n            time.sleep(0.05)\n\n    def fade_out_rain(self, duration, steps=20):\n        \"\"\"\n        Fade out rain animation.\n\n        Example:\n            cp.fade_out_rain(2, steps=20)\n        \"\"\"\n        rain_positions = []\n        fade_step_delay = duration / steps\n        for step in range(steps, 0, -1):\n            brightness = step / steps\n            start_position = random.choice(range(8, 16))\n            rain_positions.append(start_position)\n            for i in range(len(rain_positions)):\n                if rain_positions[i] &lt; 56:\n                    self.display[rain_positions[i]] = (0, 0, 0)\n                    rain_positions[i] += 8\n                    self.display[rain_positions[i]] = (\n                        int(self.rain_color[0] * brightness),\n                        int(self.rain_color[1] * brightness),\n                        int(self.rain_color[2] * brightness)\n                    )\n                else:\n                    self.display[rain_positions[i]] = (0, 0, 0)\n                    rain_positions[i] = None\n            rain_positions = [pos for pos in rain_positions if pos is not None]\n            self.display.write()\n            time.sleep(fade_step_delay)\n\n    def fade_in_rainbow(self, duration):\n        \"\"\"\n        Fade in rainbow colors.\n\n        Example:\n            cp.fade_in_rainbow(5)\n        \"\"\"\n        rainbow_colors = [(35, 0, 0), (35, 18, 0), (35, 35, 0), (0, 35, 0),\n                          (0, 0, 35), (12, 0, 35), (20, 0, 35)]\n        steps = 20\n        step_duration = duration / steps\n        for step in range(1, steps + 1):\n            brightness = step / steps\n            for i in range(self.total_leds):\n                color = rainbow_colors[i % len(rainbow_colors)]\n                self.display[i] = (int(color[0] * brightness),\n                                   int(color[1] * brightness),\n                                   int(color[2] * brightness))\n            self.display.write()\n            time.sleep(step_duration)\n\n    def fade_out_rainbow(self, duration):\n        \"\"\"\n        Fade out rainbow colors.\n\n        Example:\n            cp.fade_out_rainbow(5)\n        \"\"\"\n        rainbow_colors = [(35, 0, 0), (35, 18, 0), (35, 35, 0), (0, 35, 0),\n                          (0, 0, 35), (12, 0, 35), (20, 0, 35)]\n        steps = 20\n        step_duration = duration / steps\n        for step in range(steps, 0, -1):\n            brightness = step / steps\n            for i in range(self.total_leds):\n                color = rainbow_colors[i % len(rainbow_colors)]\n                self.display[i] = (int(color[0] * brightness),\n                                   int(color[1] * brightness),\n                                   int(color[2] * brightness))\n            self.display.write()\n            time.sleep(step_duration)\n\n    def play_game(self):\n        \"\"\"\n        Run the snake game.\n\n        Example:\n            cp.play_game()\n        \"\"\"\n        self.reset_game()\n        while True:\n            self.update_snake_display()\n            direction = self.get_direction_towards_food()\n            head_x, head_y = self.snake[0]\n            new_head = (head_x + direction[0], head_y + direction[1])\n\n            if not self.is_valid_position(new_head):\n                self.collision_effect(new_head)\n                break\n\n            self.snake.insert(0, new_head)\n            if new_head == self.food:\n                self.food = self.spawn_food()\n            else:\n                self.snake.pop()\n\n            time.sleep(0.2)\n\n    def animate(self):\n        \"\"\"\n        Run animation sequence.\n\n        Example:\n            cp.animate()\n        \"\"\"\n        self.scroll_text(\"WELCOME TO CARES\")\n        self.clear_display()\n        self.draw_clouds()\n        time.sleep(2)\n        self.animate_rain(duration=5, delay=0.1)\n        self.lightning_effect()\n        self.fade_out_rain(duration=2, steps=20)\n        self.twinkle_star(35, max_brightness=50, steps=10, delay=0.05)\n        self.fade_in_rainbow(duration=5)\n        self.fade_out_rainbow(duration=5)\n\n    def clearimage(self):\n        \"\"\"\n        Clear all pixels.\n\n        Example:\n            cp.clearimage()\n        \"\"\"\n        for i in range(self.total_leds):\n            self.display[i] = (0, 0, 0)\n        self.display.write()\n\n    def smile(self):\n        \"\"\"\n        Display smile face.\n\n        Example:\n            cp.smile()\n        \"\"\"\n        self.clearimage()\n        smile_coords = [\n            16, 24, 32, 40, 9, 2, 3, 4, 5, 14, 23, 31, 39, 47, 54,\n            61, 60, 59, 58, 49, 18, 21, 34, 43, 44, 37\n        ]\n        for i in smile_coords:\n            self.display[i] = (0, 150, 0)\n        self.display.write()\n\n    def sad(self):\n        \"\"\"\n        Display sad face.\n\n        Example:\n            cp.sad()\n        \"\"\"\n        self.clearimage()\n        sad_coords = [\n            16, 24, 32, 40, 9, 2, 3, 4, 5, 14, 23, 31, 39, 47, 54,\n            61, 60, 59, 58, 49, 18, 21, 42, 45, 35, 36,\n        ]\n        for i in sad_coords:\n            self.display[i] = (120, 120, 0)\n        self.display.write()\n\n    def cry(self):\n        \"\"\"\n        Display cry face.\n\n        Example:\n            cp.cry()\n        \"\"\"\n        self.clearimage()\n        cry_coords = [\n            16, 24, 32, 40, 9, 2, 3, 4, 5, 14, 23, 31, 39, 47, 54,\n            61, 60, 59, 58, 49, 18, 21, 42, 43, 44, 45,\n        ]\n        for i in cry_coords:\n            self.display[i] = (150, 0, 0)\n        self.display.write()\n\n    def surprised(self):\n        \"\"\"\n        Display surprised face.\n\n        Example:\n            cp.surprised()\n        \"\"\"\n        self.clearimage()\n        surprised_coords = [\n            16, 24, 32, 40, 9, 2, 3, 4, 5, 14, 23, 31, 39, 47, 54,\n            61, 60, 59, 58, 49, 18, 21, 42, 43, 44, 45, 35, 36\n        ]\n        for i in surprised_coords:\n            self.display[i] = (160, 40, 240)\n        self.display.write()\n\n    def Demo(self):\n        \"\"\"\n        Run demo animation and faces.\n\n        Example:\n            cp.Demo()\n        \"\"\"\n        self.animate()\n        self.play_game()\n        self.cry()\n        time.sleep(2)\n        self.surprised()\n        time.sleep(2)\n        self.smile()\n        time.sleep(2)\n        self.sad()\n        time.sleep(2)\n        self.clearimage()\n\n\n    class PixelSetter:\n        \"\"\"Helper class to set individual NeoPixel colors safely.\"\"\"\n\n        def __init__(self, neopixel_obj, total_leds):\n            \"\"\"\n            Initialize PixelSetter helper.\n\n            :param neopixel_obj: neopixel.NeoPixel instance\n            :param total_leds: Number of LEDs in the matrix\n            \"\"\"\n            self.np = neopixel_obj\n            self.total_leds = total_leds\n\n        def __getitem__(self, pixel):\n            \"\"\"\n            Return a function that sets the color of the pixel at the given index.\n\n            :param pixel: Integer index of pixel\n            :return: Function(r, g, b) to set color\n\n            Example:\n            ```python\n            setter = cp.PixelSetter(cp.display, cp.total_leds)\n            set_pixel_5 = setter[5]\n            set_pixel_5(255, 0, 0)  # Set pixel 5 to red\n            ```\n            \"\"\"\n            if not isinstance(pixel, int):\n                raise TypeError(f\"Pixel index must be an integer, got {type(pixel).__name__}\")\n            if not (0 &lt;= pixel &lt; self.total_leds):\n                raise IndexError(f\"Invalid index {pixel}. Must be 0 &lt;= pixel &lt; {self.total_leds}\")\n\n            def set_pixel_color(r, g, b):\n                for val, name in zip((r, g, b), \"RGB\"):\n                    if not isinstance(val, (int, float)):\n                        raise TypeError(f\"{name} value must be a number, got {type(val).__name__}\")\n                    if not (0 &lt;= val &lt;= 255):\n                        raise ValueError(f\"{name} value {val} is out of range (0\u2013255).\")\n\n                # Dim colors by factor 0.1 for brightness control\n                r_ = int(r * 0.1)\n                g_ = int(g * 0.1)\n                b_ = int(b * 0.1)\n\n                self.np[pixel] = (r_, g_, b_)\n                self.np.write()\n\n            return set_pixel_color\n\n    @property\n    def setPixel(self):\n        \"\"\"\n        Accessor property to get PixelSetter instance.\n\n        Example:\n        ```python\n        cp = CARESpixel(pin=5, total_leds=64)\n        cp.setPixel[3](255, 0, 0)  # Set pixel 3 to red (dimmed)\n        ```\n        \"\"\"\n        return self.PixelSetter(self.display, self.total_leds)\n\n    def matrixColor(self, r, g, b):\n        \"\"\"\n        Set all pixels to the specified RGB color (dimmed).\n\n        :param r: Red (0\u2013255)\n        :param g: Green (0\u2013255)\n        :param b: Blue (0\u2013255)\n\n        Example:\n        ```python\n        cp.matrixColor(10, 0, 0)  # Set all pixels dim red\n        ```\n        \"\"\"\n        for val, name in zip((r, g, b), \"RGB\"):\n            if not isinstance(val, (int, float)):\n                raise TypeError(f\"{name} value must be a number, got {type(val).__name__}\")\n            if not (0 &lt;= val &lt;= 255):\n                raise ValueError(f\"{name} value {val} is out of range (0\u2013255).\")\n\n        r_ = int(r * 0.1)\n        g_ = int(g * 0.1)\n        b_ = int(b * 0.1)\n\n        for npixel in range(self.total_leds):\n            self.display[npixel] = (r_, g_, b_)\n        self.display.write()\n\n    def clearAll(self):\n        \"\"\"\n        Turn off all pixels in the matrix.\n\n        Example:\n        ```python\n        cp.clearAll()\n        ```\n        \"\"\"\n        for npixel in range(self.total_leds):\n            self.display[npixel] = (0, 0, 0)\n        self.display.write()\n        print(\"All pixels cleared.\")\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.setPixel","title":"<code>setPixel</code>  <code>property</code>","text":"<p>Accessor property to get PixelSetter instance.</p> <p>Example:</p> <pre><code>cp = CARESpixel(pin=5, total_leds=64)\ncp.setPixel[3](255, 0, 0)  # Set pixel 3 to red (dimmed)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.PixelSetter","title":"<code>PixelSetter</code>","text":"<p>Helper class to set individual NeoPixel colors safely.</p> Source code in <code>PMU_CARES.py</code> <pre><code>class PixelSetter:\n    \"\"\"Helper class to set individual NeoPixel colors safely.\"\"\"\n\n    def __init__(self, neopixel_obj, total_leds):\n        \"\"\"\n        Initialize PixelSetter helper.\n\n        :param neopixel_obj: neopixel.NeoPixel instance\n        :param total_leds: Number of LEDs in the matrix\n        \"\"\"\n        self.np = neopixel_obj\n        self.total_leds = total_leds\n\n    def __getitem__(self, pixel):\n        \"\"\"\n        Return a function that sets the color of the pixel at the given index.\n\n        :param pixel: Integer index of pixel\n        :return: Function(r, g, b) to set color\n\n        Example:\n        ```python\n        setter = cp.PixelSetter(cp.display, cp.total_leds)\n        set_pixel_5 = setter[5]\n        set_pixel_5(255, 0, 0)  # Set pixel 5 to red\n        ```\n        \"\"\"\n        if not isinstance(pixel, int):\n            raise TypeError(f\"Pixel index must be an integer, got {type(pixel).__name__}\")\n        if not (0 &lt;= pixel &lt; self.total_leds):\n            raise IndexError(f\"Invalid index {pixel}. Must be 0 &lt;= pixel &lt; {self.total_leds}\")\n\n        def set_pixel_color(r, g, b):\n            for val, name in zip((r, g, b), \"RGB\"):\n                if not isinstance(val, (int, float)):\n                    raise TypeError(f\"{name} value must be a number, got {type(val).__name__}\")\n                if not (0 &lt;= val &lt;= 255):\n                    raise ValueError(f\"{name} value {val} is out of range (0\u2013255).\")\n\n            # Dim colors by factor 0.1 for brightness control\n            r_ = int(r * 0.1)\n            g_ = int(g * 0.1)\n            b_ = int(b * 0.1)\n\n            self.np[pixel] = (r_, g_, b_)\n            self.np.write()\n\n        return set_pixel_color\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.PixelSetter.__getitem__","title":"<code>__getitem__(pixel)</code>","text":"<p>Return a function that sets the color of the pixel at the given index.</p> <p>:param pixel: Integer index of pixel :return: Function(r, g, b) to set color</p> <p>Example:</p> <pre><code>setter = cp.PixelSetter(cp.display, cp.total_leds)\nset_pixel_5 = setter[5]\nset_pixel_5(255, 0, 0)  # Set pixel 5 to red\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def __getitem__(self, pixel):\n    \"\"\"\n    Return a function that sets the color of the pixel at the given index.\n\n    :param pixel: Integer index of pixel\n    :return: Function(r, g, b) to set color\n\n    Example:\n    ```python\n    setter = cp.PixelSetter(cp.display, cp.total_leds)\n    set_pixel_5 = setter[5]\n    set_pixel_5(255, 0, 0)  # Set pixel 5 to red\n    ```\n    \"\"\"\n    if not isinstance(pixel, int):\n        raise TypeError(f\"Pixel index must be an integer, got {type(pixel).__name__}\")\n    if not (0 &lt;= pixel &lt; self.total_leds):\n        raise IndexError(f\"Invalid index {pixel}. Must be 0 &lt;= pixel &lt; {self.total_leds}\")\n\n    def set_pixel_color(r, g, b):\n        for val, name in zip((r, g, b), \"RGB\"):\n            if not isinstance(val, (int, float)):\n                raise TypeError(f\"{name} value must be a number, got {type(val).__name__}\")\n            if not (0 &lt;= val &lt;= 255):\n                raise ValueError(f\"{name} value {val} is out of range (0\u2013255).\")\n\n        # Dim colors by factor 0.1 for brightness control\n        r_ = int(r * 0.1)\n        g_ = int(g * 0.1)\n        b_ = int(b * 0.1)\n\n        self.np[pixel] = (r_, g_, b_)\n        self.np.write()\n\n    return set_pixel_color\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.PixelSetter.__init__","title":"<code>__init__(neopixel_obj, total_leds)</code>","text":"<p>Initialize PixelSetter helper.</p> <p>:param neopixel_obj: neopixel.NeoPixel instance :param total_leds: Number of LEDs in the matrix</p> Source code in <code>PMU_CARES.py</code> <pre><code>def __init__(self, neopixel_obj, total_leds):\n    \"\"\"\n    Initialize PixelSetter helper.\n\n    :param neopixel_obj: neopixel.NeoPixel instance\n    :param total_leds: Number of LEDs in the matrix\n    \"\"\"\n    self.np = neopixel_obj\n    self.total_leds = total_leds\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.Demo","title":"<code>Demo()</code>","text":"<p>Run demo animation and faces.</p> Example <p>cp.Demo()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def Demo(self):\n    \"\"\"\n    Run demo animation and faces.\n\n    Example:\n        cp.Demo()\n    \"\"\"\n    self.animate()\n    self.play_game()\n    self.cry()\n    time.sleep(2)\n    self.surprised()\n    time.sleep(2)\n    self.smile()\n    time.sleep(2)\n    self.sad()\n    time.sleep(2)\n    self.clearimage()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.__init__","title":"<code>__init__(pin, total_leds)</code>","text":"<p>Initialize the NeoPixel display.</p> <p>:param pin: A <code>machine.Pin</code> object or pin number (int). :param total_leds: Total number of LEDs in the matrix (max 64).</p> Example <p>cp = CARESpixel(pin=5, total_leds=64)</p> Source code in <code>PMU_CARES.py</code> <pre><code>def __init__(self, pin, total_leds):\n    \"\"\"\n    Initialize the NeoPixel display.\n\n    :param pin: A `machine.Pin` object or pin number (int).\n    :param total_leds: Total number of LEDs in the matrix (max 64).\n\n    Example:\n        cp = CARESpixel(pin=5, total_leds=64)\n    \"\"\"\n    if isinstance(pin, machine.Pin):\n        self.pin = pin\n    elif isinstance(pin, int):\n        self.pin = machine.Pin(pin, machine.Pin.OUT)\n    else:\n        raise ValueError(\"Invalid pin. Must be machine.Pin or int.\")\n\n    if total_leds &gt; 64:\n        raise ValueError(\"total_leds cannot exceed 64.\")\n\n    self.total_leds = total_leds\n    self.display = neopixel.NeoPixel(self.pin, self.total_leds)\n    self.dim_purple = (29, 0, 42)\n    self.dim_green = (0, 50, 0)\n    self.bright_red = (50, 0, 0)\n    self.cloud_color = (20, 20, 20)\n    self.rain_color = (0, 0, 50)\n    self.lightning_color = (255, 255, 0)\n    self.slow_rain_delay = 0.15\n    self.fast_rain_delay = 0.05\n\n    self.snake = []\n    self.food = []\n    self.current_direction = (1, 0)\n\n    self.letters = {\n        'A': [0b01110, 0b10001, 0b10001, 0b11111, 0b10001, 0b10001, 0b10001],\n        'B': [0b11110, 0b10001, 0b10001, 0b11110, 0b10001, 0b10001, 0b11110],\n        'C': [0b01111, 0b10000, 0b10000, 0b10000, 0b10000, 0b10000, 0b01111],\n        # ... (other letters omitted for brevity)\n        ' ': [0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000]\n    }\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.animate","title":"<code>animate()</code>","text":"<p>Run animation sequence.</p> Example <p>cp.animate()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def animate(self):\n    \"\"\"\n    Run animation sequence.\n\n    Example:\n        cp.animate()\n    \"\"\"\n    self.scroll_text(\"WELCOME TO CARES\")\n    self.clear_display()\n    self.draw_clouds()\n    time.sleep(2)\n    self.animate_rain(duration=5, delay=0.1)\n    self.lightning_effect()\n    self.fade_out_rain(duration=2, steps=20)\n    self.twinkle_star(35, max_brightness=50, steps=10, delay=0.05)\n    self.fade_in_rainbow(duration=5)\n    self.fade_out_rainbow(duration=5)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.animate_rain","title":"<code>animate_rain(duration, delay, stop_new_drops=False)</code>","text":"<p>Animate rain drops.</p> <p>:param duration: seconds to animate :param delay: delay between frames :param stop_new_drops: stop adding new drops if True</p> Example <p>cp.animate_rain(5, 0.1)</p> Source code in <code>PMU_CARES.py</code> <pre><code>def animate_rain(self, duration, delay, stop_new_drops=False):\n    \"\"\"\n    Animate rain drops.\n\n    :param duration: seconds to animate\n    :param delay: delay between frames\n    :param stop_new_drops: stop adding new drops if True\n\n    Example:\n        cp.animate_rain(5, 0.1)\n    \"\"\"\n    rain_positions = []\n    start_time = time.time()\n    while time.time() - start_time &lt; duration or rain_positions:\n        if not stop_new_drops and time.time() - start_time &lt; duration:\n            start_position = random.choice(range(8, 16))\n            rain_positions.append(start_position)\n        for i in range(len(rain_positions)):\n            if rain_positions[i] &lt; 56:\n                self.display[rain_positions[i]] = (0, 0, 0)\n                rain_positions[i] += 8\n                self.display[rain_positions[i]] = self.rain_color\n            else:\n                self.display[rain_positions[i]] = (0, 0, 0)\n                rain_positions[i] = None\n        rain_positions = [pos for pos in rain_positions if pos is not None]\n        self.display.write()\n        time.sleep(delay)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.clearAll","title":"<code>clearAll()</code>","text":"<p>Turn off all pixels in the matrix.</p> <p>Example:</p> <pre><code>cp.clearAll()\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def clearAll(self):\n    \"\"\"\n    Turn off all pixels in the matrix.\n\n    Example:\n    ```python\n    cp.clearAll()\n    ```\n    \"\"\"\n    for npixel in range(self.total_leds):\n        self.display[npixel] = (0, 0, 0)\n    self.display.write()\n    print(\"All pixels cleared.\")\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.clear_display","title":"<code>clear_display()</code>","text":"<p>Clear all LEDs.</p> Example <p>cp.clear_display()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def clear_display(self):\n    \"\"\"\n    Clear all LEDs.\n\n    Example:\n        cp.clear_display()\n    \"\"\"\n    for i in range(self.total_leds):\n        self.display[i] = (0, 0, 0)\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.clearimage","title":"<code>clearimage()</code>","text":"<p>Clear all pixels.</p> Example <p>cp.clearimage()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def clearimage(self):\n    \"\"\"\n    Clear all pixels.\n\n    Example:\n        cp.clearimage()\n    \"\"\"\n    for i in range(self.total_leds):\n        self.display[i] = (0, 0, 0)\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.collision_effect","title":"<code>collision_effect(collision_position)</code>","text":"<p>Show collision effect on LED.</p> Example <p>cp.collision_effect((3, 3))</p> Source code in <code>PMU_CARES.py</code> <pre><code>def collision_effect(self, collision_position):\n    \"\"\"\n    Show collision effect on LED.\n\n    Example:\n        cp.collision_effect((3, 3))\n    \"\"\"\n    x, y = collision_position\n    colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]\n    for color in colors:\n        self.display[self.coord_to_index(x, y)] = color\n        self.display.write()\n        time.sleep(0.1)\n        self.display[self.coord_to_index(x, y)] = (0, 0, 0)\n        self.display.write()\n        time.sleep(0.1)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.coord_to_index","title":"<code>coord_to_index(x, y)</code>","text":"<p>Convert x,y coordinates to LED index.</p> Example <p>idx = cp.coord_to_index(2, 3)</p> Source code in <code>PMU_CARES.py</code> <pre><code>def coord_to_index(self, x, y):\n    \"\"\"\n    Convert x,y coordinates to LED index.\n\n    Example:\n        idx = cp.coord_to_index(2, 3)\n    \"\"\"\n    return y * 8 + x\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.cry","title":"<code>cry()</code>","text":"<p>Display cry face.</p> Example <p>cp.cry()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def cry(self):\n    \"\"\"\n    Display cry face.\n\n    Example:\n        cp.cry()\n    \"\"\"\n    self.clearimage()\n    cry_coords = [\n        16, 24, 32, 40, 9, 2, 3, 4, 5, 14, 23, 31, 39, 47, 54,\n        61, 60, 59, 58, 49, 18, 21, 42, 43, 44, 45,\n    ]\n    for i in cry_coords:\n        self.display[i] = (150, 0, 0)\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.display_letter_with_offset","title":"<code>display_letter_with_offset(letter, offset)</code>","text":"<p>Display a letter with horizontal offset (for scrolling).</p> Example <p>cp.display_letter_with_offset('A', 2)</p> Source code in <code>PMU_CARES.py</code> <pre><code>def display_letter_with_offset(self, letter, offset):\n    \"\"\"\n    Display a letter with horizontal offset (for scrolling).\n\n    Example:\n        cp.display_letter_with_offset('A', 2)\n    \"\"\"\n    pattern = self.letters.get(letter.upper(), [])\n    for row, row_data in enumerate(pattern):\n        for col in range(5):\n            matrix_col = col + offset\n            if 0 &lt;= matrix_col &lt; 8:\n                if row_data &amp; (1 &lt;&lt; (4 - col)):\n                    self.display[row * 8 + matrix_col] = self.dim_purple\n                else:\n                    self.display[row * 8 + matrix_col] = (0, 0, 0)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.draw_clouds","title":"<code>draw_clouds()</code>","text":"<p>Draw clouds pattern.</p> Example <p>cp.draw_clouds()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def draw_clouds(self):\n    \"\"\"\n    Draw clouds pattern.\n\n    Example:\n        cp.draw_clouds()\n    \"\"\"\n    for i in range(8):\n        self.display[i] = self.cloud_color\n    for i in range(8, 16):\n        self.display[i] = self.cloud_color\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.fade_in_rainbow","title":"<code>fade_in_rainbow(duration)</code>","text":"<p>Fade in rainbow colors.</p> Example <p>cp.fade_in_rainbow(5)</p> Source code in <code>PMU_CARES.py</code> <pre><code>def fade_in_rainbow(self, duration):\n    \"\"\"\n    Fade in rainbow colors.\n\n    Example:\n        cp.fade_in_rainbow(5)\n    \"\"\"\n    rainbow_colors = [(35, 0, 0), (35, 18, 0), (35, 35, 0), (0, 35, 0),\n                      (0, 0, 35), (12, 0, 35), (20, 0, 35)]\n    steps = 20\n    step_duration = duration / steps\n    for step in range(1, steps + 1):\n        brightness = step / steps\n        for i in range(self.total_leds):\n            color = rainbow_colors[i % len(rainbow_colors)]\n            self.display[i] = (int(color[0] * brightness),\n                               int(color[1] * brightness),\n                               int(color[2] * brightness))\n        self.display.write()\n        time.sleep(step_duration)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.fade_out_rain","title":"<code>fade_out_rain(duration, steps=20)</code>","text":"<p>Fade out rain animation.</p> Example <p>cp.fade_out_rain(2, steps=20)</p> Source code in <code>PMU_CARES.py</code> <pre><code>def fade_out_rain(self, duration, steps=20):\n    \"\"\"\n    Fade out rain animation.\n\n    Example:\n        cp.fade_out_rain(2, steps=20)\n    \"\"\"\n    rain_positions = []\n    fade_step_delay = duration / steps\n    for step in range(steps, 0, -1):\n        brightness = step / steps\n        start_position = random.choice(range(8, 16))\n        rain_positions.append(start_position)\n        for i in range(len(rain_positions)):\n            if rain_positions[i] &lt; 56:\n                self.display[rain_positions[i]] = (0, 0, 0)\n                rain_positions[i] += 8\n                self.display[rain_positions[i]] = (\n                    int(self.rain_color[0] * brightness),\n                    int(self.rain_color[1] * brightness),\n                    int(self.rain_color[2] * brightness)\n                )\n            else:\n                self.display[rain_positions[i]] = (0, 0, 0)\n                rain_positions[i] = None\n        rain_positions = [pos for pos in rain_positions if pos is not None]\n        self.display.write()\n        time.sleep(fade_step_delay)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.fade_out_rainbow","title":"<code>fade_out_rainbow(duration)</code>","text":"<p>Fade out rainbow colors.</p> Example <p>cp.fade_out_rainbow(5)</p> Source code in <code>PMU_CARES.py</code> <pre><code>def fade_out_rainbow(self, duration):\n    \"\"\"\n    Fade out rainbow colors.\n\n    Example:\n        cp.fade_out_rainbow(5)\n    \"\"\"\n    rainbow_colors = [(35, 0, 0), (35, 18, 0), (35, 35, 0), (0, 35, 0),\n                      (0, 0, 35), (12, 0, 35), (20, 0, 35)]\n    steps = 20\n    step_duration = duration / steps\n    for step in range(steps, 0, -1):\n        brightness = step / steps\n        for i in range(self.total_leds):\n            color = rainbow_colors[i % len(rainbow_colors)]\n            self.display[i] = (int(color[0] * brightness),\n                               int(color[1] * brightness),\n                               int(color[2] * brightness))\n        self.display.write()\n        time.sleep(step_duration)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.get_direction_towards_food","title":"<code>get_direction_towards_food()</code>","text":"<p>Determine snake direction towards food.</p> Example <p>direction = cp.get_direction_towards_food()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def get_direction_towards_food(self):\n    \"\"\"\n    Determine snake direction towards food.\n\n    Example:\n        direction = cp.get_direction_towards_food()\n    \"\"\"\n    head_x, head_y = self.snake[0]\n    food_x, food_y = self.food\n\n    possible_directions = []\n    if head_x &lt; food_x:\n        possible_directions.append((1, 0))\n    elif head_x &gt; food_x:\n        possible_directions.append((-1, 0))\n    if head_y &lt; food_y:\n        possible_directions.append((0, 1))\n    elif head_y &gt; food_y:\n        possible_directions.append((0, -1))\n\n    for direction in possible_directions:\n        next_pos = (head_x + direction[0], head_y + direction[1])\n        if self.is_valid_position(next_pos):\n            return direction\n\n    for direction in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        next_pos = (head_x + direction[0], head_y + direction[1])\n        if self.is_valid_position(next_pos):\n            return direction\n\n    return self.current_direction\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.is_valid_position","title":"<code>is_valid_position(position)</code>","text":"<p>Check if a position is valid for the snake.</p> Example <p>valid = cp.is_valid_position((1, 1))</p> Source code in <code>PMU_CARES.py</code> <pre><code>def is_valid_position(self, position):\n    \"\"\"\n    Check if a position is valid for the snake.\n\n    Example:\n        valid = cp.is_valid_position((1, 1))\n    \"\"\"\n    x, y = position\n    return 0 &lt;= x &lt; 8 and 0 &lt;= y &lt; 8 and position not in self.snake\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.lightning_effect","title":"<code>lightning_effect()</code>","text":"<p>Animate lightning flashes.</p> Example <p>cp.lightning_effect()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def lightning_effect(self):\n    \"\"\"\n    Animate lightning flashes.\n\n    Example:\n        cp.lightning_effect()\n    \"\"\"\n    for _ in range(3):\n        for i in range(self.total_leds):\n            self.display[i] = self.lightning_color\n        self.display.write()\n        time.sleep(0.05)\n        self.clear_display()\n        self.draw_clouds()\n        self.display.write()\n        time.sleep(0.05)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.matrixColor","title":"<code>matrixColor(r, g, b)</code>","text":"<p>Set all pixels to the specified RGB color (dimmed).</p> <p>:param r: Red (0\u2013255) :param g: Green (0\u2013255) :param b: Blue (0\u2013255)</p> <p>Example:</p> <pre><code>cp.matrixColor(10, 0, 0)  # Set all pixels dim red\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def matrixColor(self, r, g, b):\n    \"\"\"\n    Set all pixels to the specified RGB color (dimmed).\n\n    :param r: Red (0\u2013255)\n    :param g: Green (0\u2013255)\n    :param b: Blue (0\u2013255)\n\n    Example:\n    ```python\n    cp.matrixColor(10, 0, 0)  # Set all pixels dim red\n    ```\n    \"\"\"\n    for val, name in zip((r, g, b), \"RGB\"):\n        if not isinstance(val, (int, float)):\n            raise TypeError(f\"{name} value must be a number, got {type(val).__name__}\")\n        if not (0 &lt;= val &lt;= 255):\n            raise ValueError(f\"{name} value {val} is out of range (0\u2013255).\")\n\n    r_ = int(r * 0.1)\n    g_ = int(g * 0.1)\n    b_ = int(b * 0.1)\n\n    for npixel in range(self.total_leds):\n        self.display[npixel] = (r_, g_, b_)\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.play_game","title":"<code>play_game()</code>","text":"<p>Run the snake game.</p> Example <p>cp.play_game()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def play_game(self):\n    \"\"\"\n    Run the snake game.\n\n    Example:\n        cp.play_game()\n    \"\"\"\n    self.reset_game()\n    while True:\n        self.update_snake_display()\n        direction = self.get_direction_towards_food()\n        head_x, head_y = self.snake[0]\n        new_head = (head_x + direction[0], head_y + direction[1])\n\n        if not self.is_valid_position(new_head):\n            self.collision_effect(new_head)\n            break\n\n        self.snake.insert(0, new_head)\n        if new_head == self.food:\n            self.food = self.spawn_food()\n        else:\n            self.snake.pop()\n\n        time.sleep(0.2)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.reset_game","title":"<code>reset_game()</code>","text":"<p>Reset snake game state.</p> Example <p>cp.reset_game()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def reset_game(self):\n    \"\"\"\n    Reset snake game state.\n\n    Example:\n        cp.reset_game()\n    \"\"\"\n    self.snake = [(4, 4)]\n    self.food = self.spawn_food()\n    self.current_direction = (1, 0)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.sad","title":"<code>sad()</code>","text":"<p>Display sad face.</p> Example <p>cp.sad()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def sad(self):\n    \"\"\"\n    Display sad face.\n\n    Example:\n        cp.sad()\n    \"\"\"\n    self.clearimage()\n    sad_coords = [\n        16, 24, 32, 40, 9, 2, 3, 4, 5, 14, 23, 31, 39, 47, 54,\n        61, 60, 59, 58, 49, 18, 21, 42, 45, 35, 36,\n    ]\n    for i in sad_coords:\n        self.display[i] = (120, 120, 0)\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.scroll_text","title":"<code>scroll_text(text)</code>","text":"<p>Scroll text across the LED matrix.</p> Example <p>cp.scroll_text(\"HELLO\")</p> Source code in <code>PMU_CARES.py</code> <pre><code>def scroll_text(self, text):\n    \"\"\"\n    Scroll text across the LED matrix.\n\n    Example:\n        cp.scroll_text(\"HELLO\")\n    \"\"\"\n    text = ' ' + text + '  '\n    for position in range(len(text) * 6):\n        self.clear_display()\n        for i, letter in enumerate(text):\n            self.display_letter_with_offset(letter, 8 - (position - i * 6))\n        self.display.write()\n        time.sleep(0.1)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.smile","title":"<code>smile()</code>","text":"<p>Display smile face.</p> Example <p>cp.smile()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def smile(self):\n    \"\"\"\n    Display smile face.\n\n    Example:\n        cp.smile()\n    \"\"\"\n    self.clearimage()\n    smile_coords = [\n        16, 24, 32, 40, 9, 2, 3, 4, 5, 14, 23, 31, 39, 47, 54,\n        61, 60, 59, 58, 49, 18, 21, 34, 43, 44, 37\n    ]\n    for i in smile_coords:\n        self.display[i] = (0, 150, 0)\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.spawn_food","title":"<code>spawn_food()</code>","text":"<p>Generate a new food position.</p> Example <p>food = cp.spawn_food()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def spawn_food(self):\n    \"\"\"\n    Generate a new food position.\n\n    Example:\n        food = cp.spawn_food()\n    \"\"\"\n    while True:\n        new_food = (random.randint(0, 7), random.randint(0, 7))\n        if new_food not in self.snake:\n            return new_food\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.surprised","title":"<code>surprised()</code>","text":"<p>Display surprised face.</p> Example <p>cp.surprised()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def surprised(self):\n    \"\"\"\n    Display surprised face.\n\n    Example:\n        cp.surprised()\n    \"\"\"\n    self.clearimage()\n    surprised_coords = [\n        16, 24, 32, 40, 9, 2, 3, 4, 5, 14, 23, 31, 39, 47, 54,\n        61, 60, 59, 58, 49, 18, 21, 42, 43, 44, 45, 35, 36\n    ]\n    for i in surprised_coords:\n        self.display[i] = (160, 40, 240)\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.twinkle_star","title":"<code>twinkle_star(position, max_brightness=50, steps=10, delay=0.05)</code>","text":"<p>Twinkle a star effect at a position.</p> Example <p>cp.twinkle_star(10)</p> Source code in <code>PMU_CARES.py</code> <pre><code>def twinkle_star(self, position, max_brightness=50, steps=10, delay=0.05):\n    \"\"\"\n    Twinkle a star effect at a position.\n\n    Example:\n        cp.twinkle_star(10)\n    \"\"\"\n    for brightness in range(1, max_brightness + 1, max_brightness // steps):\n        self.display[position] = (brightness, brightness, brightness)\n        self.display.write()\n        time.sleep(delay)\n\n    for brightness in range(max_brightness, 0, -max_brightness // steps):\n        self.display[position] = (brightness, brightness, brightness)\n        self.display.write()\n        time.sleep(delay)\n</code></pre>"},{"location":"reference/#PMU_CARES.CARESpixel.update_snake_display","title":"<code>update_snake_display()</code>","text":"<p>Update LEDs to show snake and food positions.</p> Example <p>cp.update_snake_display()</p> Source code in <code>PMU_CARES.py</code> <pre><code>def update_snake_display(self):\n    \"\"\"\n    Update LEDs to show snake and food positions.\n\n    Example:\n        cp.update_snake_display()\n    \"\"\"\n    self.clear_display()\n    for segment in self.snake:\n        self.display[self.coord_to_index(segment[0], segment[1])] = self.dim_green\n    self.display[self.coord_to_index(self.food[0], self.food[1])] = self.bright_red\n    self.display.write()\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED","title":"<code>OLED</code>","text":"Source code in <code>PMU_CARES.py</code> <pre><code>class OLED:\n    def __init__(self, width=128, height=64, scl_pin=22, sda_pin=21, i2c_addr=0x3C, spi=None, external_vcc=False):\n        \"\"\"\n        Initialize the OLED display using I2C (default) or SPI.\n\n        Example:\n        ```python\n        oled = OLED()\n        ```\n        \"\"\"\n        pass\n\n    def contrast(self, contrast):\n        \"\"\"\n        Set the contrast level.\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.contrast(128)\n        ```\n        \"\"\"\n        pass\n\n    def write(self, text, x=0, y=0):\n        \"\"\"\n        Write text on the OLED display at position (x, y).\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.write(\"Hello, World!\", 10, 10)\n        ```\n        \"\"\"\n        pass\n\n    def clear(self):\n        \"\"\"\n        Clear the display.\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.clear()\n        ```\n        \"\"\"\n        pass\n\n    def fill(self, color):\n        \"\"\"\n        Fill the display with a single color (0 or 1).\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.fill(1)\n        ```\n        \"\"\"\n        pass\n\n    def poweroff(self):\n        \"\"\"\n        Turn off the display.\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.poweroff()\n        ```\n        \"\"\"\n        pass\n\n    def poweron(self):\n        \"\"\"\n        Turn on the display.\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.poweron()\n        ```\n        \"\"\"\n        pass\n\n    def invert(self, invert):\n        \"\"\"\n        Invert display colors.\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.invert(1)\n        ```\n        \"\"\"\n        pass\n\n    def load_image(self, filename):\n        \"\"\"\n        Load an image from a file.\n\n        Example:\n        ```python\n        oled = OLED()\n        image = oled.load_image(\"logo.bin\")\n        ```\n        \"\"\"\n        pass\n\n    def display_image(self, data):\n        \"\"\"\n        Display image data on the screen.\n\n        Example:\n        ```python\n        oled = OLED()\n        image = oled.load_image(\"logo.bin\")\n        oled.display_image(image)\n        ```\n        \"\"\"\n        pass\n\n    def fill_rect(self, x, y, w, h, color):\n        \"\"\"\n        Draw a filled rectangle.\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.fill_rect(10, 10, 40, 20, 1)\n        ```\n        \"\"\"\n        pass\n\n    def vline(self, x, y, h, color):\n        \"\"\"\n        Draw a vertical line.\n\n        Example:\n        ```python\n        oled = OLED()\n        oled.vline(5, 0, 30, 1)\n        ```\n        \"\"\"\n        pass\n\n    def blit(self, framebuffer, x=0, y=0):\n        \"\"\"\n        Copy framebuffer content to the display.\n\n        Example:\n        ```python\n        dummy_fb = framebuf.FrameBuffer(bytearray(1024), 128, 64, framebuf.MONO_VLSB)\n        oled = OLED()\n        oled.blit(dummy_fb, 0, 0)\n        ```\n        \"\"\"\n        pass\n\n    def display_image_from_bytes(self, image):\n        \"\"\"\n        Display image from bytearray.\n\n        Example:\n        ```python\n        image = bytearray(1024)\n        oled = OLED()\n        oled.display_image_from_bytes(image)\n        ```\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.__init__","title":"<code>__init__(width=128, height=64, scl_pin=22, sda_pin=21, i2c_addr=60, spi=None, external_vcc=False)</code>","text":"<p>Initialize the OLED display using I2C (default) or SPI.</p> <p>Example:</p> <pre><code>oled = OLED()\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def __init__(self, width=128, height=64, scl_pin=22, sda_pin=21, i2c_addr=0x3C, spi=None, external_vcc=False):\n    \"\"\"\n    Initialize the OLED display using I2C (default) or SPI.\n\n    Example:\n    ```python\n    oled = OLED()\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.blit","title":"<code>blit(framebuffer, x=0, y=0)</code>","text":"<p>Copy framebuffer content to the display.</p> <p>Example:</p> <pre><code>dummy_fb = framebuf.FrameBuffer(bytearray(1024), 128, 64, framebuf.MONO_VLSB)\noled = OLED()\noled.blit(dummy_fb, 0, 0)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def blit(self, framebuffer, x=0, y=0):\n    \"\"\"\n    Copy framebuffer content to the display.\n\n    Example:\n    ```python\n    dummy_fb = framebuf.FrameBuffer(bytearray(1024), 128, 64, framebuf.MONO_VLSB)\n    oled = OLED()\n    oled.blit(dummy_fb, 0, 0)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.clear","title":"<code>clear()</code>","text":"<p>Clear the display.</p> <p>Example:</p> <pre><code>oled = OLED()\noled.clear()\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def clear(self):\n    \"\"\"\n    Clear the display.\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.clear()\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.contrast","title":"<code>contrast(contrast)</code>","text":"<p>Set the contrast level.</p> <p>Example:</p> <pre><code>oled = OLED()\noled.contrast(128)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def contrast(self, contrast):\n    \"\"\"\n    Set the contrast level.\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.contrast(128)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.display_image","title":"<code>display_image(data)</code>","text":"<p>Display image data on the screen.</p> <p>Example:</p> <pre><code>oled = OLED()\nimage = oled.load_image(\"logo.bin\")\noled.display_image(image)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def display_image(self, data):\n    \"\"\"\n    Display image data on the screen.\n\n    Example:\n    ```python\n    oled = OLED()\n    image = oled.load_image(\"logo.bin\")\n    oled.display_image(image)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.display_image_from_bytes","title":"<code>display_image_from_bytes(image)</code>","text":"<p>Display image from bytearray.</p> <p>Example:</p> <pre><code>image = bytearray(1024)\noled = OLED()\noled.display_image_from_bytes(image)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def display_image_from_bytes(self, image):\n    \"\"\"\n    Display image from bytearray.\n\n    Example:\n    ```python\n    image = bytearray(1024)\n    oled = OLED()\n    oled.display_image_from_bytes(image)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.fill","title":"<code>fill(color)</code>","text":"<p>Fill the display with a single color (0 or 1).</p> <p>Example:</p> <pre><code>oled = OLED()\noled.fill(1)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def fill(self, color):\n    \"\"\"\n    Fill the display with a single color (0 or 1).\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.fill(1)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.fill_rect","title":"<code>fill_rect(x, y, w, h, color)</code>","text":"<p>Draw a filled rectangle.</p> <p>Example:</p> <pre><code>oled = OLED()\noled.fill_rect(10, 10, 40, 20, 1)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def fill_rect(self, x, y, w, h, color):\n    \"\"\"\n    Draw a filled rectangle.\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.fill_rect(10, 10, 40, 20, 1)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.invert","title":"<code>invert(invert)</code>","text":"<p>Invert display colors.</p> <p>Example:</p> <pre><code>oled = OLED()\noled.invert(1)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def invert(self, invert):\n    \"\"\"\n    Invert display colors.\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.invert(1)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.load_image","title":"<code>load_image(filename)</code>","text":"<p>Load an image from a file.</p> <p>Example:</p> <pre><code>oled = OLED()\nimage = oled.load_image(\"logo.bin\")\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def load_image(self, filename):\n    \"\"\"\n    Load an image from a file.\n\n    Example:\n    ```python\n    oled = OLED()\n    image = oled.load_image(\"logo.bin\")\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.poweroff","title":"<code>poweroff()</code>","text":"<p>Turn off the display.</p> <p>Example:</p> <pre><code>oled = OLED()\noled.poweroff()\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def poweroff(self):\n    \"\"\"\n    Turn off the display.\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.poweroff()\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.poweron","title":"<code>poweron()</code>","text":"<p>Turn on the display.</p> <p>Example:</p> <pre><code>oled = OLED()\noled.poweron()\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def poweron(self):\n    \"\"\"\n    Turn on the display.\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.poweron()\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.vline","title":"<code>vline(x, y, h, color)</code>","text":"<p>Draw a vertical line.</p> <p>Example:</p> <pre><code>oled = OLED()\noled.vline(5, 0, 30, 1)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def vline(self, x, y, h, color):\n    \"\"\"\n    Draw a vertical line.\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.vline(5, 0, 30, 1)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.OLED.write","title":"<code>write(text, x=0, y=0)</code>","text":"<p>Write text on the OLED display at position (x, y).</p> <p>Example:</p> <pre><code>oled = OLED()\noled.write(\"Hello, World!\", 10, 10)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def write(self, text, x=0, y=0):\n    \"\"\"\n    Write text on the OLED display at position (x, y).\n\n    Example:\n    ```python\n    oled = OLED()\n    oled.write(\"Hello, World!\", 10, 10)\n    ```\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/#PMU_CARES.Pin","title":"<code>Pin</code>","text":"Source code in <code>PMU_CARES.py</code> <pre><code>class Pin:\n    IN = machine.Pin.IN  # Alias for input mode\n    OUT = machine.Pin.OUT  # Alias for output mode\n\n    def __init__(self, pin_number, mode=machine.Pin.OUT):\n        \"\"\"\n        Initialize a pin for digital or analog operations.\n\n        Args:\n            pin_number (int): The pin number.\n            mode (int): Use `Pin.IN` or `Pin.OUT` for input or output mode.\n\n        Example:\n        ```python\n        pin_in = Pin(12, Pin.IN)   # Initialize pin 12 as input\n        pin_out = Pin(14, Pin.OUT) # Initialize pin 14 as output\n        ```\n        \"\"\"\n        if mode not in [machine.Pin.IN, machine.Pin.OUT]:\n            raise ValueError(\"Invalid mode. Use Pin.IN or Pin.OUT.\")\n\n        self.pin = machine.Pin(pin_number, mode)\n        self.mode = mode\n        self.is_analog = False  # Track if analog functionality is used\n        self.adc = None  # For analog input\n        self.pwm = None  # For analog output\n\n    def analogRead(self):\n        \"\"\"\n        Read analog value (0-4095) if pin is input with ADC.\n\n        Returns:\n            int: ADC reading value.\n\n        Example:\n        ```python\n        pin = Pin(34, Pin.IN)\n        value = pin.analogRead()\n        print(\"ADC value:\", value)\n        ```\n        \"\"\"\n        if self.mode != machine.Pin.IN:\n            raise AttributeError(\"analogRead is only supported in input mode.\")\n        if not self.is_analog:\n            self.adc = machine.ADC(self.pin)\n            self.adc.atten(machine.ADC.ATTN_11DB)  # Configure attenuation\n            self.is_analog = True\n        return self.adc.read()\n\n    def analogReadVoltage(self, reference_voltage=3.3):\n        \"\"\"\n        Convert ADC reading to voltage.\n\n        Args:\n            reference_voltage (float): Reference voltage, default is 3.3V.\n\n        Returns:\n            float: Voltage value.\n\n        Example:\n        ```python\n        pin = Pin(34, Pin.IN)\n        voltage = pin.analogReadVoltage()\n        print(\"Voltage:\", voltage)\n        ```\n        \"\"\"\n        if not self.is_analog or self.mode != machine.Pin.IN:\n            raise AttributeError(\"analogReadVoltage is only supported in input mode.\")\n        adc_value = self.analogRead()\n        return adc_value * (reference_voltage / 4095)\n\n    def analogWrite(self, value):\n        \"\"\"\n        Write PWM duty cycle to pin (0-255) if configured as output.\n\n        Args:\n            value (int): PWM duty cycle between 0 and 255.\n\n        Example:\n        ```python\n        pin = Pin(14, Pin.OUT)\n        pin.analogWrite(128)  # Set PWM to about 50% duty cycle\n        ```\n        \"\"\"\n        if self.mode != Pin.OUT:\n            raise AttributeError(\"analogWrite is only supported in output mode.\")\n        if self.pwm is None:\n            self.pwm = machine.PWM(self.pin, freq=1000)  # PWM freq 1kHz\n        if 0 &lt;= value &lt;= 255:\n            self.pwm.duty(value * 4)  # Scale 0-255 to 0-1023 duty\n        else:\n            raise ValueError(\"Value must be in the range 0-255.\")\n\n    def digitalRead(self):\n        \"\"\"\n        Read digital value (0 or 1) if pin is input.\n\n        Returns:\n            int: Digital pin value (0 or 1).\n\n        Example:\n        ```python\n        pin = Pin(12, Pin.IN)\n        val = pin.digitalRead()\n        print(\"Digital value:\", val)\n        ```\n        \"\"\"\n        if self.mode != Pin.IN:\n            raise AttributeError(\"digitalRead is only supported in input mode.\")\n        return self.pin.value()\n\n    def digitalWrite(self, value):\n        \"\"\"\n        Write digital value (0 or 1) if pin is output.\n\n        Args:\n            value (int): 0 or 1 to set pin low or high.\n\n        Example:\n        ```python\n        pin = Pin(14, Pin.OUT)\n        pin.digitalWrite(1)  # Set pin high\n        pin.digitalWrite(0)  # Set pin low\n        ```\n        \"\"\"\n        if self.mode != Pin.OUT:\n            raise AttributeError(\"digitalWrite is only supported in output mode.\")\n        if value not in (0, 1):\n            raise ValueError(f\"digitalWrite only accepts 0 or 1, got {value}\")\n\n        self.pin.value(value)\n</code></pre>"},{"location":"reference/#PMU_CARES.Pin.__init__","title":"<code>__init__(pin_number, mode=machine.Pin.OUT)</code>","text":"<p>Initialize a pin for digital or analog operations.</p> <p>Parameters:</p> Name Type Description Default <code>pin_number</code> <code>int</code> <p>The pin number.</p> required <code>mode</code> <code>int</code> <p>Use <code>Pin.IN</code> or <code>Pin.OUT</code> for input or output mode.</p> <code>OUT</code> <p>Example:</p> <pre><code>pin_in = Pin(12, Pin.IN)   # Initialize pin 12 as input\npin_out = Pin(14, Pin.OUT) # Initialize pin 14 as output\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def __init__(self, pin_number, mode=machine.Pin.OUT):\n    \"\"\"\n    Initialize a pin for digital or analog operations.\n\n    Args:\n        pin_number (int): The pin number.\n        mode (int): Use `Pin.IN` or `Pin.OUT` for input or output mode.\n\n    Example:\n    ```python\n    pin_in = Pin(12, Pin.IN)   # Initialize pin 12 as input\n    pin_out = Pin(14, Pin.OUT) # Initialize pin 14 as output\n    ```\n    \"\"\"\n    if mode not in [machine.Pin.IN, machine.Pin.OUT]:\n        raise ValueError(\"Invalid mode. Use Pin.IN or Pin.OUT.\")\n\n    self.pin = machine.Pin(pin_number, mode)\n    self.mode = mode\n    self.is_analog = False  # Track if analog functionality is used\n    self.adc = None  # For analog input\n    self.pwm = None  # For analog output\n</code></pre>"},{"location":"reference/#PMU_CARES.Pin.analogRead","title":"<code>analogRead()</code>","text":"<p>Read analog value (0-4095) if pin is input with ADC.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>ADC reading value.</p> <p>Example:</p> <pre><code>pin = Pin(34, Pin.IN)\nvalue = pin.analogRead()\nprint(\"ADC value:\", value)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def analogRead(self):\n    \"\"\"\n    Read analog value (0-4095) if pin is input with ADC.\n\n    Returns:\n        int: ADC reading value.\n\n    Example:\n    ```python\n    pin = Pin(34, Pin.IN)\n    value = pin.analogRead()\n    print(\"ADC value:\", value)\n    ```\n    \"\"\"\n    if self.mode != machine.Pin.IN:\n        raise AttributeError(\"analogRead is only supported in input mode.\")\n    if not self.is_analog:\n        self.adc = machine.ADC(self.pin)\n        self.adc.atten(machine.ADC.ATTN_11DB)  # Configure attenuation\n        self.is_analog = True\n    return self.adc.read()\n</code></pre>"},{"location":"reference/#PMU_CARES.Pin.analogReadVoltage","title":"<code>analogReadVoltage(reference_voltage=3.3)</code>","text":"<p>Convert ADC reading to voltage.</p> <p>Parameters:</p> Name Type Description Default <code>reference_voltage</code> <code>float</code> <p>Reference voltage, default is 3.3V.</p> <code>3.3</code> <p>Returns:</p> Name Type Description <code>float</code> <p>Voltage value.</p> <p>Example:</p> <pre><code>pin = Pin(34, Pin.IN)\nvoltage = pin.analogReadVoltage()\nprint(\"Voltage:\", voltage)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def analogReadVoltage(self, reference_voltage=3.3):\n    \"\"\"\n    Convert ADC reading to voltage.\n\n    Args:\n        reference_voltage (float): Reference voltage, default is 3.3V.\n\n    Returns:\n        float: Voltage value.\n\n    Example:\n    ```python\n    pin = Pin(34, Pin.IN)\n    voltage = pin.analogReadVoltage()\n    print(\"Voltage:\", voltage)\n    ```\n    \"\"\"\n    if not self.is_analog or self.mode != machine.Pin.IN:\n        raise AttributeError(\"analogReadVoltage is only supported in input mode.\")\n    adc_value = self.analogRead()\n    return adc_value * (reference_voltage / 4095)\n</code></pre>"},{"location":"reference/#PMU_CARES.Pin.analogWrite","title":"<code>analogWrite(value)</code>","text":"<p>Write PWM duty cycle to pin (0-255) if configured as output.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>PWM duty cycle between 0 and 255.</p> required <p>Example:</p> <pre><code>pin = Pin(14, Pin.OUT)\npin.analogWrite(128)  # Set PWM to about 50% duty cycle\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def analogWrite(self, value):\n    \"\"\"\n    Write PWM duty cycle to pin (0-255) if configured as output.\n\n    Args:\n        value (int): PWM duty cycle between 0 and 255.\n\n    Example:\n    ```python\n    pin = Pin(14, Pin.OUT)\n    pin.analogWrite(128)  # Set PWM to about 50% duty cycle\n    ```\n    \"\"\"\n    if self.mode != Pin.OUT:\n        raise AttributeError(\"analogWrite is only supported in output mode.\")\n    if self.pwm is None:\n        self.pwm = machine.PWM(self.pin, freq=1000)  # PWM freq 1kHz\n    if 0 &lt;= value &lt;= 255:\n        self.pwm.duty(value * 4)  # Scale 0-255 to 0-1023 duty\n    else:\n        raise ValueError(\"Value must be in the range 0-255.\")\n</code></pre>"},{"location":"reference/#PMU_CARES.Pin.digitalRead","title":"<code>digitalRead()</code>","text":"<p>Read digital value (0 or 1) if pin is input.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Digital pin value (0 or 1).</p> <p>Example:</p> <pre><code>pin = Pin(12, Pin.IN)\nval = pin.digitalRead()\nprint(\"Digital value:\", val)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def digitalRead(self):\n    \"\"\"\n    Read digital value (0 or 1) if pin is input.\n\n    Returns:\n        int: Digital pin value (0 or 1).\n\n    Example:\n    ```python\n    pin = Pin(12, Pin.IN)\n    val = pin.digitalRead()\n    print(\"Digital value:\", val)\n    ```\n    \"\"\"\n    if self.mode != Pin.IN:\n        raise AttributeError(\"digitalRead is only supported in input mode.\")\n    return self.pin.value()\n</code></pre>"},{"location":"reference/#PMU_CARES.Pin.digitalWrite","title":"<code>digitalWrite(value)</code>","text":"<p>Write digital value (0 or 1) if pin is output.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>0 or 1 to set pin low or high.</p> required <p>Example:</p> <pre><code>pin = Pin(14, Pin.OUT)\npin.digitalWrite(1)  # Set pin high\npin.digitalWrite(0)  # Set pin low\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def digitalWrite(self, value):\n    \"\"\"\n    Write digital value (0 or 1) if pin is output.\n\n    Args:\n        value (int): 0 or 1 to set pin low or high.\n\n    Example:\n    ```python\n    pin = Pin(14, Pin.OUT)\n    pin.digitalWrite(1)  # Set pin high\n    pin.digitalWrite(0)  # Set pin low\n    ```\n    \"\"\"\n    if self.mode != Pin.OUT:\n        raise AttributeError(\"digitalWrite is only supported in output mode.\")\n    if value not in (0, 1):\n        raise ValueError(f\"digitalWrite only accepts 0 or 1, got {value}\")\n\n    self.pin.value(value)\n</code></pre>"},{"location":"reference/#PMU_CARES.Servo","title":"<code>Servo</code>","text":"Source code in <code>PMU_CARES.py</code> <pre><code>class Servo:\n    def __init__(self, pin, freq=50):\n        \"\"\"\n        Initialize a servo motor.\n\n        :param pin: A Pin object (your custom Pin class) or machine.Pin instance.\n        :param freq: PWM frequency in Hz (default 50).\n\n        Example:\n        ```python\n        servo5 = Servo(Pin(5))          # Using your custom Pin class\n        servo15 = Servo(machine.Pin(15))  # Using machine.Pin directly\n        ```\n        \"\"\"\n        if isinstance(pin, Pin):\n            self.pwm = machine.PWM(pin.pin, freq=freq)\n        elif isinstance(pin, machine.Pin):\n            self.pwm = machine.PWM(pin, freq=freq)\n        else:\n            raise ValueError(\"Pin must be a Pin or machine.Pin object.\")\n\n        self.min_duty = 40  # Duty cycle for 0 degrees\n        self.max_duty = 115  # Duty cycle for 180 degrees\n\n    def write_angle(self, angle):\n        \"\"\"\n        Set the servo angle between 0 and 180 degrees.\n\n        :param angle: Integer angle (0 to 180).\n\n        Example:\n        ```python\n        servo5 = Servo(Pin(5))\n        servo5.write_angle(90)  # Move servo to 90 degrees\n        servo5.write_angle(0)   # Move servo to 0 degrees\n        ```\n        \"\"\"\n        if 0 &lt;= angle &lt;= 180:\n            duty = self.min_duty + (self.max_duty - self.min_duty) * angle // 180\n            self.pwm.duty(duty)\n        else:\n            raise ValueError(\"Angle must be between 0 and 180 degrees.\")\n</code></pre>"},{"location":"reference/#PMU_CARES.Servo.__init__","title":"<code>__init__(pin, freq=50)</code>","text":"<p>Initialize a servo motor.</p> <p>:param pin: A Pin object (your custom Pin class) or machine.Pin instance. :param freq: PWM frequency in Hz (default 50).</p> <p>Example:</p> <pre><code>servo5 = Servo(Pin(5))          # Using your custom Pin class\nservo15 = Servo(machine.Pin(15))  # Using machine.Pin directly\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def __init__(self, pin, freq=50):\n    \"\"\"\n    Initialize a servo motor.\n\n    :param pin: A Pin object (your custom Pin class) or machine.Pin instance.\n    :param freq: PWM frequency in Hz (default 50).\n\n    Example:\n    ```python\n    servo5 = Servo(Pin(5))          # Using your custom Pin class\n    servo15 = Servo(machine.Pin(15))  # Using machine.Pin directly\n    ```\n    \"\"\"\n    if isinstance(pin, Pin):\n        self.pwm = machine.PWM(pin.pin, freq=freq)\n    elif isinstance(pin, machine.Pin):\n        self.pwm = machine.PWM(pin, freq=freq)\n    else:\n        raise ValueError(\"Pin must be a Pin or machine.Pin object.\")\n\n    self.min_duty = 40  # Duty cycle for 0 degrees\n    self.max_duty = 115  # Duty cycle for 180 degrees\n</code></pre>"},{"location":"reference/#PMU_CARES.Servo.write_angle","title":"<code>write_angle(angle)</code>","text":"<p>Set the servo angle between 0 and 180 degrees.</p> <p>:param angle: Integer angle (0 to 180).</p> <p>Example:</p> <pre><code>servo5 = Servo(Pin(5))\nservo5.write_angle(90)  # Move servo to 90 degrees\nservo5.write_angle(0)   # Move servo to 0 degrees\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def write_angle(self, angle):\n    \"\"\"\n    Set the servo angle between 0 and 180 degrees.\n\n    :param angle: Integer angle (0 to 180).\n\n    Example:\n    ```python\n    servo5 = Servo(Pin(5))\n    servo5.write_angle(90)  # Move servo to 90 degrees\n    servo5.write_angle(0)   # Move servo to 0 degrees\n    ```\n    \"\"\"\n    if 0 &lt;= angle &lt;= 180:\n        duty = self.min_duty + (self.max_duty - self.min_duty) * angle // 180\n        self.pwm.duty(duty)\n    else:\n        raise ValueError(\"Angle must be between 0 and 180 degrees.\")\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment","title":"<code>sevenSegment</code>","text":"Source code in <code>PMU_CARES.py</code> <pre><code>class sevenSegment:\n    DIGIT_TO_SEGMENT = {\n        '0': 0b00111111,\n        '1': 0b00000110,\n        '2': 0b01011011,\n        '3': 0b01001111,\n        '4': 0b01100110,\n        '5': 0b01101101,\n        '6': 0b01111101,\n        '7': 0b00000111,\n        '8': 0b01111111,\n        '9': 0b01101111,\n        'A': 0b01110111,\n        'C': 0b00111001,\n        'E': 0b01111001,\n        'F': 0b01110001,\n        'H': 0b01110110,\n        'J': 0b00001110,\n        'L': 0b00111000,\n        'O': 0b00111111,\n        'P': 0b01110011,\n        'S': 0b01101101,\n        'U': 0b00111110,\n        '-': 0b01000000,\n        ' ': 0b00000000,\n        '^': 0b01100011,\n    }\n\n    def __init__(self, clkPin=22, dioPin=21, bitDelay=100):\n        \"\"\"\n        Initialize the sevenSegment display.\n\n        :param clkPin: Clock pin number (default 22).\n        :param dioPin: Data pin number (default 21).\n        :param bitDelay: Delay in microseconds for communication (default 100).\n\n        Example:\n        ```python\n        segment = sevenSegment(clkPin=5, dioPin=4)\n        OR\n        segment = sevenSegment()\n\n        ```\n        \"\"\"\n        self.clk = Pin(clkPin, Pin.OUT)\n        self.dio = Pin(dioPin, Pin.OUT)\n        self.bitDelay = bitDelay\n        self.clk.digitalWrite(1)\n        self.dio.digitalWrite(1)\n\n    def writeByte(self, data):\n        \"\"\"\n        Send a byte to the display.\n\n        :param data: Byte data to send.\n\n        Example:\n        ```python\n        segment.writeByte(0xFF)\n        ```\n        \"\"\"\n        for _ in range(8):\n            self.clk.digitalWrite(0)\n            self.dio.digitalWrite(data &amp; 0x01)\n            self.clk.digitalWrite(1)\n            data &gt;&gt;= 1\n        self.clk.digitalWrite(0)\n        self.dio.digitalWrite(1)\n        self.clk.digitalWrite(1)\n\n    def setSegments(self, segments, colon=False, brightness=7):\n        \"\"\"\n        Set the segments on the display.\n\n        :param segments: List of 4 bytes, each representing segments for a digit.\n        :param colon: Boolean, True to turn colon on.\n        :param brightness: Brightness level (0 to 7).\n\n        Example:\n        ```python\n        segments = [0x3F, 0x06, 0x5B, 0x4F]  # Displays \"0123\"\n        segment.setSegments(segments, colon=True, brightness=5)\n        ```\n        \"\"\"\n        self.start()\n        self.writeByte(0x40)\n        self.stop()\n\n        self.start()\n        self.writeByte(0xC0)\n        for i in range(4):\n            byte = segments[i]\n            if colon and i == 1:\n                byte |= 0b10000000\n            self.writeByte(byte)\n        self.stop()\n\n        self.start()\n        self.writeByte(0x88 | (brightness &amp; 0x07))\n        self.stop()\n\n    def encodeCharacter(self, char):\n        \"\"\"\n        Encode a character to its 7-segment byte representation.\n\n        :param char: Character to encode.\n        :return: Byte representing the segments.\n\n        Example:\n        ```python\n        byte_val = segment.encodeCharacter('A')\n        print(bin(byte_val))\n        ```\n        \"\"\"\n        return self.DIGIT_TO_SEGMENT.get(char.upper(), 0)\n\n    def displayDigit(self, inputValue, brightness=7):\n        \"\"\"\n        Display a number or string on the 4-digit 7-segment display.\n\n        :param inputValue: int or str (max 4 digits/characters).\n        :param brightness: Brightness level (0 to 7).\n\n        Example:\n        ```python\n        segment.displayDigit(1234)\n        segment.displayDigit(\"AbCd\")\n        ```\n        \"\"\"\n        segments = [0] * 4\n\n        if isinstance(inputValue, int):\n            isNegative = inputValue &lt; 0\n            inputValue = abs(inputValue)\n\n            if inputValue &gt;= 10**4:\n                raise ValueError(\"Overflow: Input exceeds 4 digits.\")\n\n            for i in range(3, -1, -1):\n                segments[i] = self.encodeCharacter(str(inputValue % 10))\n                inputValue //= 10\n\n            if isNegative:\n                segments[0] = 0b01000000  # Negative sign\n        elif isinstance(inputValue, str):\n            if len(inputValue) &gt; 4:\n                raise ValueError(\"Overflow: String input exceeds 4 characters.\")\n            for i, char in enumerate(inputValue[:4]):\n                segments[i] = self.encodeCharacter(char)\n\n        self.setSegments(segments, colon=False, brightness=brightness)\n\n    def displayColon(self, state, brightness=7):\n        \"\"\"\n        Turn the colon on or off.\n\n        :param state: 1 to turn colon on, 0 to turn off.\n        :param brightness: Brightness level (0 to 7).\n\n        Example:\n        ```python\n        segment.displayColon(1)  # Turn colon on\n        segment.displayColon(0)  # Turn colon off\n        ```\n        \"\"\"\n        self.setSegments([0, 0, 0, 0], colon=(state == 1), brightness=brightness)\n\n    def start(self):\n        \"\"\"Start communication with the display.\"\"\"\n        self.dio.digitalWrite(1)\n        self.clk.digitalWrite(1)\n        self.dio.digitalWrite(0)\n        self.clk.digitalWrite(0)\n\n    def stop(self):\n        \"\"\"Stop communication with the display.\"\"\"\n        self.clk.digitalWrite(0)\n        self.dio.digitalWrite(0)\n        self.clk.digitalWrite(1)\n        self.dio.digitalWrite(1)\n\n    def write_digit(self, inputValue, brightness=7):\n        \"\"\"\n        Display digit(s) using displayDigit.\n\n        :param inputValue: int or str.\n        :param brightness: Brightness level.\n\n        Example:\n        ```python\n        segment.write_digit(5678)\n        ```\n        \"\"\"\n        self.displayDigit(inputValue, brightness=brightness)\n\n    def write_colon(self, state, brightness=7):\n        \"\"\"\n        Control colon display.\n\n        :param state: 1 to turn colon on, 0 to turn off.\n        :param brightness: Brightness level.\n\n        Example:\n        ```python\n        segment.write_colon(1)\n        ```\n        \"\"\"\n        self.displayColon(state, brightness=brightness)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.__init__","title":"<code>__init__(clkPin=22, dioPin=21, bitDelay=100)</code>","text":"<p>Initialize the sevenSegment display.</p> <p>:param clkPin: Clock pin number (default 22). :param dioPin: Data pin number (default 21). :param bitDelay: Delay in microseconds for communication (default 100).</p> <p>Example:</p> <pre><code>segment = sevenSegment(clkPin=5, dioPin=4)\nOR\nsegment = sevenSegment()\n\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def __init__(self, clkPin=22, dioPin=21, bitDelay=100):\n    \"\"\"\n    Initialize the sevenSegment display.\n\n    :param clkPin: Clock pin number (default 22).\n    :param dioPin: Data pin number (default 21).\n    :param bitDelay: Delay in microseconds for communication (default 100).\n\n    Example:\n    ```python\n    segment = sevenSegment(clkPin=5, dioPin=4)\n    OR\n    segment = sevenSegment()\n\n    ```\n    \"\"\"\n    self.clk = Pin(clkPin, Pin.OUT)\n    self.dio = Pin(dioPin, Pin.OUT)\n    self.bitDelay = bitDelay\n    self.clk.digitalWrite(1)\n    self.dio.digitalWrite(1)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.displayColon","title":"<code>displayColon(state, brightness=7)</code>","text":"<p>Turn the colon on or off.</p> <p>:param state: 1 to turn colon on, 0 to turn off. :param brightness: Brightness level (0 to 7).</p> <p>Example:</p> <pre><code>segment.displayColon(1)  # Turn colon on\nsegment.displayColon(0)  # Turn colon off\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def displayColon(self, state, brightness=7):\n    \"\"\"\n    Turn the colon on or off.\n\n    :param state: 1 to turn colon on, 0 to turn off.\n    :param brightness: Brightness level (0 to 7).\n\n    Example:\n    ```python\n    segment.displayColon(1)  # Turn colon on\n    segment.displayColon(0)  # Turn colon off\n    ```\n    \"\"\"\n    self.setSegments([0, 0, 0, 0], colon=(state == 1), brightness=brightness)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.displayDigit","title":"<code>displayDigit(inputValue, brightness=7)</code>","text":"<p>Display a number or string on the 4-digit 7-segment display.</p> <p>:param inputValue: int or str (max 4 digits/characters). :param brightness: Brightness level (0 to 7).</p> <p>Example:</p> <pre><code>segment.displayDigit(1234)\nsegment.displayDigit(\"AbCd\")\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def displayDigit(self, inputValue, brightness=7):\n    \"\"\"\n    Display a number or string on the 4-digit 7-segment display.\n\n    :param inputValue: int or str (max 4 digits/characters).\n    :param brightness: Brightness level (0 to 7).\n\n    Example:\n    ```python\n    segment.displayDigit(1234)\n    segment.displayDigit(\"AbCd\")\n    ```\n    \"\"\"\n    segments = [0] * 4\n\n    if isinstance(inputValue, int):\n        isNegative = inputValue &lt; 0\n        inputValue = abs(inputValue)\n\n        if inputValue &gt;= 10**4:\n            raise ValueError(\"Overflow: Input exceeds 4 digits.\")\n\n        for i in range(3, -1, -1):\n            segments[i] = self.encodeCharacter(str(inputValue % 10))\n            inputValue //= 10\n\n        if isNegative:\n            segments[0] = 0b01000000  # Negative sign\n    elif isinstance(inputValue, str):\n        if len(inputValue) &gt; 4:\n            raise ValueError(\"Overflow: String input exceeds 4 characters.\")\n        for i, char in enumerate(inputValue[:4]):\n            segments[i] = self.encodeCharacter(char)\n\n    self.setSegments(segments, colon=False, brightness=brightness)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.encodeCharacter","title":"<code>encodeCharacter(char)</code>","text":"<p>Encode a character to its 7-segment byte representation.</p> <p>:param char: Character to encode. :return: Byte representing the segments.</p> <p>Example:</p> <pre><code>byte_val = segment.encodeCharacter('A')\nprint(bin(byte_val))\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def encodeCharacter(self, char):\n    \"\"\"\n    Encode a character to its 7-segment byte representation.\n\n    :param char: Character to encode.\n    :return: Byte representing the segments.\n\n    Example:\n    ```python\n    byte_val = segment.encodeCharacter('A')\n    print(bin(byte_val))\n    ```\n    \"\"\"\n    return self.DIGIT_TO_SEGMENT.get(char.upper(), 0)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.setSegments","title":"<code>setSegments(segments, colon=False, brightness=7)</code>","text":"<p>Set the segments on the display.</p> <p>:param segments: List of 4 bytes, each representing segments for a digit. :param colon: Boolean, True to turn colon on. :param brightness: Brightness level (0 to 7).</p> <p>Example:</p> <pre><code>segments = [0x3F, 0x06, 0x5B, 0x4F]  # Displays \"0123\"\nsegment.setSegments(segments, colon=True, brightness=5)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def setSegments(self, segments, colon=False, brightness=7):\n    \"\"\"\n    Set the segments on the display.\n\n    :param segments: List of 4 bytes, each representing segments for a digit.\n    :param colon: Boolean, True to turn colon on.\n    :param brightness: Brightness level (0 to 7).\n\n    Example:\n    ```python\n    segments = [0x3F, 0x06, 0x5B, 0x4F]  # Displays \"0123\"\n    segment.setSegments(segments, colon=True, brightness=5)\n    ```\n    \"\"\"\n    self.start()\n    self.writeByte(0x40)\n    self.stop()\n\n    self.start()\n    self.writeByte(0xC0)\n    for i in range(4):\n        byte = segments[i]\n        if colon and i == 1:\n            byte |= 0b10000000\n        self.writeByte(byte)\n    self.stop()\n\n    self.start()\n    self.writeByte(0x88 | (brightness &amp; 0x07))\n    self.stop()\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.start","title":"<code>start()</code>","text":"<p>Start communication with the display.</p> Source code in <code>PMU_CARES.py</code> <pre><code>def start(self):\n    \"\"\"Start communication with the display.\"\"\"\n    self.dio.digitalWrite(1)\n    self.clk.digitalWrite(1)\n    self.dio.digitalWrite(0)\n    self.clk.digitalWrite(0)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.stop","title":"<code>stop()</code>","text":"<p>Stop communication with the display.</p> Source code in <code>PMU_CARES.py</code> <pre><code>def stop(self):\n    \"\"\"Stop communication with the display.\"\"\"\n    self.clk.digitalWrite(0)\n    self.dio.digitalWrite(0)\n    self.clk.digitalWrite(1)\n    self.dio.digitalWrite(1)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.writeByte","title":"<code>writeByte(data)</code>","text":"<p>Send a byte to the display.</p> <p>:param data: Byte data to send.</p> <p>Example:</p> <pre><code>segment.writeByte(0xFF)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def writeByte(self, data):\n    \"\"\"\n    Send a byte to the display.\n\n    :param data: Byte data to send.\n\n    Example:\n    ```python\n    segment.writeByte(0xFF)\n    ```\n    \"\"\"\n    for _ in range(8):\n        self.clk.digitalWrite(0)\n        self.dio.digitalWrite(data &amp; 0x01)\n        self.clk.digitalWrite(1)\n        data &gt;&gt;= 1\n    self.clk.digitalWrite(0)\n    self.dio.digitalWrite(1)\n    self.clk.digitalWrite(1)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.write_colon","title":"<code>write_colon(state, brightness=7)</code>","text":"<p>Control colon display.</p> <p>:param state: 1 to turn colon on, 0 to turn off. :param brightness: Brightness level.</p> <p>Example:</p> <pre><code>segment.write_colon(1)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def write_colon(self, state, brightness=7):\n    \"\"\"\n    Control colon display.\n\n    :param state: 1 to turn colon on, 0 to turn off.\n    :param brightness: Brightness level.\n\n    Example:\n    ```python\n    segment.write_colon(1)\n    ```\n    \"\"\"\n    self.displayColon(state, brightness=brightness)\n</code></pre>"},{"location":"reference/#PMU_CARES.sevenSegment.write_digit","title":"<code>write_digit(inputValue, brightness=7)</code>","text":"<p>Display digit(s) using displayDigit.</p> <p>:param inputValue: int or str. :param brightness: Brightness level.</p> <p>Example:</p> <pre><code>segment.write_digit(5678)\n</code></pre> Source code in <code>PMU_CARES.py</code> <pre><code>def write_digit(self, inputValue, brightness=7):\n    \"\"\"\n    Display digit(s) using displayDigit.\n\n    :param inputValue: int or str.\n    :param brightness: Brightness level.\n\n    Example:\n    ```python\n    segment.write_digit(5678)\n    ```\n    \"\"\"\n    self.displayDigit(inputValue, brightness=brightness)\n</code></pre>"}]}